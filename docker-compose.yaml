version: '3.4'

services:
    php:
        build:
            context: ./symfony
        container_name: php
        depends_on:
        - postgres
        env_file:
        - ./symfony/.env
        # Comment out these volumes in production
        volumes:
        - ./symfony:/srv/symfony:rw,cached
        - ./symfony/docker/php/php.ini:/usr/local/etc/php/conf.d/php.ini
        # If you develop on Linux, comment out the following volumes to just use bind-mounted project directory from host
        environment:
            # If you develop on Windows change this to remote_host=docker.for.win.localhost
            # If you develop on Linux change this to remote_host=172.17.0.1
            XDEBUG_CONFIG: "remote_host=docker.for.mac.localhost idekey=IDE_XDEBUG"
            BLACKFIRE_CLIENT_ID: ${BLACKFIRE_CLIENT_ID}
            BLACKFIRE_CLIENT_TOKEN: ${BLACKFIRE_CLIENT_TOKEN}
            OAUTH_FACEBOOK_CLIENT_ID: ${OAUTH_FACEBOOK_CLIENT_ID}
            OAUTH_FACEBOOK_CLIENT_SECRET: ${OAUTH_FACEBOOK_CLIENT_SECRET}

    symfony:
        build:
            context: ./symfony
            dockerfile: Dockerfile.nginx
        container_name: symfony
        depends_on:
        - php
        ports:
        - "8080:80"
        volumes:
        - ./symfony/public:/srv/symfony/public:ro

    postgres:
        # In production, you may want to use a managed database service
        image: postgres:9.6-alpine
        container_name: postgres
        environment:
        - POSTGRES_DB=sooonr
        - POSTGRES_USER=sooonr
        - POSTGRES_PASSWORD=admin
        - PGDATA=/var/lib/postgresql/data/db-files/
        volumes:
        - db-data:/var/lib/postgresql/data:rw
        # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
        # - ./docker/db/data:/var/lib/postgresql/data:rw
        ports:
        - "5432:5432"

# Optional mysql database - uncomment and replace "depends_on: [ postgres ] with mysql
#   mysql:
#      # In production, you may want to use a managed database service
#      image: mariadb
#      container_name: mysql
#      environment:
#          MYSQL_ROOT_PASSWORD: root
#          MYSQL_USER: symfony
#          MYSQL_PASSWORD: symfony
#      command: --log-bin=/var/lib/mysql/mysql-bin.log --binlog-format=ROW --server-id=1 --init-file /var/mysql/data/init.sql
#      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
#      volumes:
#      - ./symfony/docker/mysql:/var/mysql/data:ro
#      - db-data:/var/lib/mysql:rw

    adminer:
        image: adminer
        container_name: adminer
        depends_on:
        - postgres
        restart: always
        ports:
        - 2000:8080

#    blackfire:
#        image: blackfire/blackfire
#        container_name: blackfire
#        depends_on:
#        - php
#        environment:
#            BLACKFIRE_SERVER_ID: ${BLACKFIRE_SERVER_ID}
#            BLACKFIRE_SERVER_TOKEN: ${BLACKFIRE_SERVER_TOKEN}
#            BLACKFIRE_LOG_LEVEL: 4
#        ports:
#        - "8707:8707"

    h2-proxy:
        # Don't use this proxy in prod
        build:
            context: ./h2-proxy
            dockerfile: ./Dockerfile
        container_name: h2-proxy
        depends_on:
        - symfony
        ports:
        - "80:80"
        - "443:443"

volumes:
    db-data: {}
